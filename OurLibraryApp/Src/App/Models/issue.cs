//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OurLibrary.Models
{
    using Annotation;
    using OurLibraryApp.Gui.App.Controls;
    using OurLibraryApp.Src.App.Access;
    using OurLibraryApp.Src.App.Utils;
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Windows.Forms;

    [Serializable]
    public partial class issue
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public issue()
        {
            this.book_issue = new List<book_issue>();

        }
        [FieldAttribute(AutoGenerated = true, Required = true, FieldType = AttributeConstant.TYPE_ID_STR_NUMB)]

        public string id { get; set; }
        [FieldAttribute(FieldType = AttributeConstant.TYPE_READONLY)]


        public System.DateTime date { get; set; }
        //      [FieldAttribute(FieldType = AttributeConstant.TYPE_READONLY)]

        public string user_id { get; set; }
        [FieldAttribute(FieldType = AttributeConstant.TYPE_READONLY)]

        public string student_id { get; set; }
        [FieldAttribute(FieldType = AttributeConstant.TYPE_READONLY)]

        public string addtional_info { get; set; }
        [FieldAttribute(FieldType = AttributeConstant.TYPE_READONLY)]

        public string TYPE
        {
            get { if (null == type) return null; else return type.Trim().ToUpper(); }
        }
        public string type
        {
            get; set;
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        [FieldAttribute(FieldType = AttributeConstant.TYPE_COUNT)]
        public virtual List<book_issue> book_issue { get; set; }
        public virtual student student { get; set; }
        public virtual user user { get; set; }

        [ActionAttribute(FieldType = AttributeConstant.TYPE_DETAIL_CLICK)]
        public Panel DetailPanel()
        {
            Panel DetailPanel = new Panel();
            Control[] DetailsCol = new Control[7 * (book_issue.Count + 1)];
            //update
            string[] ColumnLabels = { "No", "IssueId", "RecId", "Title", "", "Returned", type.Trim()+" item id" };
            for (int i = 0; i < ColumnLabels.Length; i++)
            {
                DetailsCol[i] = new Label() { Text = ColumnLabels[i] };
            }
            int ControlIndex = 7;
            for (int i = 0; i < book_issue.Count; i++)
            {
                book_issue BS = this.book_issue[i];

                if (type.Trim().Equals("issue"))
                {
                    Dictionary<string, object> CheckReturnResponse = Transaction.FetchObj(0, 0, Transaction.URL, "checkReturnedBook", new Dictionary<string, object>()
                        {
                            {"book_issue_id",BS.id }
                        });
                    if (CheckReturnResponse["result"].ToString() == "0")
                    {
                        BS.book_issue_id = StringUtil.JSONStringToMap(CheckReturnResponse["data"].ToString())["book_issue_id"].ToString();
                    }
                }

                DetailsCol[ControlIndex++] = new Label() { Text = (i + 1).ToString() };
                DetailsCol[ControlIndex++] = new Label() { Text = BS.id };
                DetailsCol[ControlIndex++] = new Label() { Text = BS.book_record_id };
                DetailsCol[ControlIndex++] = new Label() { Text = BS.book_record.book.title };
                DetailsCol[ControlIndex++] = new BlankControl() { Reserved = ReservedFor.BEFORE_HOR };
                string Type = this.type.ToLower().Trim();
                if (Type == ("return"))
                {
                    DetailsCol[ControlIndex++] = null;
                }
                else
                {
                    DetailsCol[ControlIndex++] = new Label() { Text = BS.book_return == 1 ? "yes " + BS.ref_issue : "No" };

                }
                DetailsCol[ControlIndex++] = new Label() { Text = BS.book_issue_id };
            }
            //
            DetailPanel = ControlUtil.PopulatePanel(7, DetailsCol, 5, 70, 20, Color.Orange, 5, 200);

            student Student = UserClient.StudentById(student_id);

            Panel StudentDetail = ControlUtil.PopulatePanel(1, new Control[]
            {
                new Label() {Text= type.ToUpper()+" ID         : "+id },
                new Label() {Text= "Date             : "+date },
                new Label() {Text= "Student ID       : "+Student.id },
                new Label() {Text= "Student Name     : "+Student.name },
                new Label() {Text= "Student ClassId  : "+Student.class_id },
            }, 5, 200, 20, Color.Yellow, 5, 5, 500);

            Panel Wrapper = new Panel();
            Wrapper.Controls.Add(StudentDetail);
            Wrapper.Controls.Add(DetailPanel);
            Wrapper.SetBounds(5, 5, 500, 500);

            Wrapper.AutoScroll = false;
            Wrapper.VerticalScroll.Visible = true;
            Wrapper.VerticalScroll.Enabled = true;
            Wrapper.AutoScroll = true;

            return Wrapper;
        }


    }
}
